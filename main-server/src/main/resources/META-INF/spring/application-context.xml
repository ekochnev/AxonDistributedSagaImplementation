<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:axon="http://www.axonframework.org/schema/core"
       xmlns:axon-amqp="http://www.axonframework.org/schema/amqp"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.axonframework.org/schema/core http://www.axonframework.org/schema/axon-core.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.axonframework.org/schema/amqp http://www.axonframework.org/schema/axon-amqp.xsd
       http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>
    <!--This element activates annotation-based configuration of event handling
    and command processing in the Axon framework. All beans with @CommandHandler or
    @EventHandler annotations will be configured to receive commands from the command bus
    and events from the event bus, respectively.-->
    <axon:annotation-config/>

    <context:component-scan base-package="ru.iklyubanov.diploma.saga" />

    <import resource="database-context.xml" />

        <!--<bean class="ru.iklyubanov.diploma.saga.core.axon.event.PaymentEventHandler"/>-->

    <!-- Load system properties for the loadFactor -->
    <!--<context:property-placeholder location="classpath:META-INF/spring/configuration.properties"/>--><!-- здесь будут искаться property файлы -->

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="classpath:configuration.properties"/>
    </bean>


    <!--=============COMMAND SETTINGS============================-->

    <axon:command-bus id="commandBus">
        <!--<axon:handlerInterceptors> TODO позже можно сделать перехватчик комманд для логгирования
            <ref bean="auditingInterceptor"/>
        </axon:handlerInterceptors>-->
    </axon:command-bus>

    <bean class="org.axonframework.commandhandling.gateway.CommandGatewayFactoryBean">
        <property name="commandBus" ref="commandBus"/>
    </bean>

    <!--=================Rabbit AMQP settings=================-->
    <!--application.configuration.rabbit.host=localhost
application.configuration.rabbit.port=5672
application.configuration.rabbit.username=guest
application.configuration.rabbit.password=guest
application.configuration.rabbit.exchangeName=Axon.EventBus
host="${application.configuration.rabbit.host}"
            port="${application.configuration.rabbit.port}"
            username="${application.configuration.rabbit.username}"
            password="${application.configuration.rabbit.password}"-->
    <rabbit:connection-factory
            host="localhost"
            port="5672"
            username="guest"
            password="guest"/>

    <!--${application.configuration.rabbit.queueName}-->
    <rabbit:queue
            name="PayQueue"
            durable="false"
            auto-delete="false"/>

    <!--${application.configuration.rabbit.exchangeName}-->
    <rabbit:fanout-exchange
            name="PayExchange">
        <rabbit:bindings>
            <rabbit:binding queue="PayQueue"/>
        </rabbit:bindings>
    </rabbit:fanout-exchange>

    <bean class="org.axonframework.serializer.xml.XStreamSerializer"/>

    <!--TODO Лучше использовать ClusteringEventsBus для распределенности-->
    <!--TODO We can try SpringIntegrationEventBus if ClusteringEventsBus isn't work-->
    <axon-amqp:terminal id="terminal" exchange-name="Axon.EventBus">
        <axon-amqp:default-configuration/>
    </axon-amqp:terminal>
    <!--=============CLUSTER SETTINGS============================-->
    <axon:cluster id="cluster" default="true">
        <axon:meta-data>
            <entry key="AMQP.Config">
                <axon-amqp:configuration queue-name="PayQueue"
                        transaction-size="100"/>
            </entry>
        </axon:meta-data>
    </axon:cluster>

    <!--=============EVENT SETTINGS============================-->
    <axon:event-bus id="eventBus" terminal="terminal" />


    <!--All event sourcing repositories need an Event Store.-->
    <axon:jpa-event-store id="jpaEventStore"/>

    <axon:event-sourcing-repository id="paymentRepository"
                                    aggregate-type="ru.iklyubanov.diploma.saga.core.axon.aggregate.PaymentAggregate"/>

    <axon:aggregate-command-handler id="paymentAggregateHandler"
                                    aggregate-type="ru.iklyubanov.diploma.saga.core.axon.aggregate.PaymentAggregate"
                                    repository="paymentRepository" command-bus="commandBus"/>

    <axon:jpa-event-store id="eventStore" data-source="dataSource"/>

    <axon:jpa-saga-repository id="sagaRepository"
                              use-explicit-flush="true" saga-serializer="serializer"><!--resource-injector="resourceInjector"-->
        <!--Spring users can use the <axon:cache-config> element to add caching behavior to a <axon:jpa-saga-repository> element.
        It is configured with two cache references (which may refer to the same cache): one which stores the cached Saga instances,
        and one that stores the associations.-->
        <axon:cache-config saga-cache="sagaCacheRef" associations-cache="associationCacheRef"/>
    </axon:jpa-saga-repository>

    <bean id="serializer" class="org.axonframework.serializer.xml.XStreamSerializer"/>

    <!--======================================&ndash;&gt;-->

    <!--JPA implementation of the Saga Repository. It uses an EntityManager to persist the actual saga in a backing store.-->
    <!--After each operations that modified the backing store, EntityManager.flush() is invoked to ensure the store
    contains the last modifications. To override this behavior, see-->
    <bean id="sagaSqlSchema" class="org.axonframework.saga.repository.jpa.JpaSagaRepository">
        <constructor-arg name="entityManagerProvider" value="org.axonframework.common.jpa.SimpleEntityManagerProvider"/>
    </bean>

    <bean id="simpleEntityManagerProvider" class="org.axonframework.common.jpa.SimpleEntityManagerProvider">
        <constructor-arg name="entityManager" ref="entityManagerFactory"/>
    </bean>

       <!--<bean id="contactNameRepository" class="org.axonframework.sample.app.command.JpaContactNameRepository"/>-->

</beans>